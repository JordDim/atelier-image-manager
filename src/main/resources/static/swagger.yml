openapi: 3.0.3
info:
  title: atelier-image-manager
  description: |-
    A microservice focused on the storage and retrieval of images.
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8083/api/v1
    description: Local server

tags:
  - name: image
    description: Controller for images.

paths:
  /images:
    post:
      tags:
        - image
      summary: Create a new image
      description: Create a new image
      operationId: createImage
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageRequest'
      responses:
        '201':
          description: Image created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageResponse'
        '400':
          description: Invalid input
        '409':
          description: Image already exists
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - image
      summary: Retrieve all images
      description: Retrieve all images in a list format
      operationId: getImages
      responses:
        '201':
          description: Retrieved image list successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImageResponse'
        '400':
          description: Invalid input
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /images/{imageId}:
    delete:
      tags:
        - image
      summary: Delete an image
      description: Delete an image
      operationId: deleteImage
      parameters:
        - name: imageId
          in: path
          description: id for the image that is wanted to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Image deleted successfully
        '400':
          description: Invalid input
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    ImageRequest:
      type: object
      properties:
        image:
          type: string
          format: binary
          example: photo.jpg

    ImageResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: photo.jpg

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 404
          description: "Código de estado HTTP que indica el tipo de error."
        message:
          type: string
          example: "Error message"
          description: "Mensaje descriptivo del error que proporciona más detalles."
        details:
          type: string
          example: "Additional error details."
          description: "Información adicional o detalles sobre el error (opcional)."
